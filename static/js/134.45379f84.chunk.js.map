{"version":3,"file":"static/js/134.45379f84.chunk.js","mappings":"yOASMA,EAASC,EAAAA,KAAaC,MAAM,CAChCC,MAAOF,EAAAA,OAGHG,EAAgB,CACpBD,MAAO,IA6DT,UA1De,WAAO,IAAD,EACnB,GAAwCE,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACA,GAA4CC,EAAAA,EAAAA,UAAS,IAArD,eAAOC,EAAP,KAAuBC,EAAvB,KACMP,EAAK,UAAGG,EAAaK,IAAI,gBAApB,QAAgC,GACrCC,GAAWC,EAAAA,EAAAA,MAkBjB,OARAC,EAAAA,EAAAA,YAAU,WACJX,IACFY,EAAAA,EAAAA,IAAkBZ,GACfa,KAAKN,GACLO,OAAM,SAAAC,GAAK,OAAIC,EAAAA,GAAAA,MAAY,gDAE/B,CAAChB,KAGF,6BACE,SAAC,KAAD,CACEC,cAAeA,EACfgB,iBAAkBpB,EAClBqB,SArBe,SAAC,EAAD,GAA+B,IAA5BlB,EAA2B,EAA3BA,MAAWmB,EAAgB,EAAhBA,UACZ,KAAjBnB,EAAMoB,QAIVhB,EAA0B,KAAVJ,EAAe,CAAEA,MAAOA,GAAU,IAClDmB,KAJEH,EAAAA,GAAAA,MAAY,kCAAmC,CAAEK,MAAO,UAgBxD,UAKE,UAAC,KAAD,YACE,SAAC,KAAD,CACEC,KAAK,OACLC,aAAa,MACbC,WAAS,EACTC,YAAY,gBACZC,KAAK,WAEP,mBAAQJ,KAAK,SAAb,qBACA,SAAC,KAAD,CAAcI,KAAK,gBAGvB,SAAC,EAAAC,SAAD,CAAUC,UAAU,mDAApB,UACE,wBACGtB,GACCA,EAAeuB,KAAI,YAAoB,IAAjBC,EAAgB,EAAhBA,GAAIC,EAAY,EAAZA,MACxB,OACE,yBACE,SAAC,KAAD,CAAMC,GAAE,UAAKF,GAAMG,MAAO,CAAEC,KAAMzB,GAAlC,SACGsB,KAFID,e,yMCrDzBK,IAAAA,SAAAA,QAAyB,+BACzB,IAAMC,EAAU,mCAET,SAAeC,IAAtB,4CAAO,OAAP,oBAAO,sGAEgBF,IAAAA,IAAA,sCAAyCC,IAFzD,uBAEEE,EAFF,EAEEA,KAFF,kBAGEA,EAAKC,SAHP,kEAMA,SAAe3B,EAAtB,+CAAO,OAAP,oBAAO,WAAiCZ,GAAjC,kFAEGwC,EAAS,IAAIC,gBAAgB,CAC/BC,QAASN,EACTpC,MAAOA,EACP2C,SAAU,QACXC,eAAe,IANf,SAQmBT,IAAAA,IAAA,wBAA2BK,IAR9C,uBAQIF,EARJ,EAQIA,KARJ,kBASEA,EAAKC,SATP,kEAYA,SAAeM,EAAtB,+CAAO,OAAP,oBAAO,WAA+Bf,GAA/B,yFAEkBK,IAAAA,IAAA,iBAAoBL,EAApB,oBAAkCM,EAAlC,oBAFlB,uBAEGE,EAFH,EAEGA,KAFH,kBAGEA,GAHF,kEAMA,SAAeQ,EAAtB,+CAAO,OAAP,oBAAO,WAA4BhB,GAA5B,yFAEmBK,IAAAA,IAAA,iBAAoBL,EAApB,4BAA0CM,EAA1C,oBAFnB,uBAEIE,EAFJ,EAEIA,KAFJ,kBAGAA,EAAKS,MAHL,kEAMA,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAA+BlB,GAA/B,yFAEkBK,IAAAA,IAAA,iBAAoBL,EAApB,4BAA0CM,EAA1C,oBAFlB,uBAEGE,EAFH,EAEGA,KAFH,kBAGEA,EAAKC,SAHP","sources":["pages/Movies.jsx","services/themoviedbAPI.js"],"sourcesContent":["import { Formik, Form, Field, ErrorMessage } from 'formik';\nimport { useState, useEffect, Suspense } from 'react';\nimport { Link, useSearchParams, useLocation } from 'react-router-dom';\n\nimport { toast } from 'react-toastify';\nimport * as yup from 'yup';\nimport { getSearchedMovies } from 'services/themoviedbAPI';\n// import PropTypes from 'prop-types';\n\nconst schema = yup.object().shape({\n  query: yup.string(),\n});\n\nconst initialValues = {\n  query: '',\n};\n\nconst Movies = () => {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const [searchedMovies, setSearchedMovies] = useState([]);\n  const query = searchParams.get('query') ?? '';\n  const location = useLocation();\n\n  const handleSubmit = ({ query }, { resetForm }) => {\n    if (query.trim() === '') {\n      toast.error('Please, enter the search query.', { theme: 'dark' });\n      return;\n    }\n    setSearchParams(query !== '' ? { query: query } : {});\n    resetForm();\n  };\n  useEffect(() => {\n    if (query) {\n      getSearchedMovies(query)\n        .then(setSearchedMovies)\n        .catch(error => toast.error('Something went wrong. Please try again.'));\n    }\n  }, [query]);\n\n  return (\n    <main>\n      <Formik\n        initialValues={initialValues}\n        validationSchema={schema}\n        onSubmit={handleSubmit}\n      >\n        <Form>\n          <Field\n            type=\"text\"\n            autoComplete=\"off\"\n            autoFocus\n            placeholder=\"Search movies\"\n            name=\"query\"\n          />\n          <button type=\"submit\">Search</button>\n          <ErrorMessage name=\"query\" />\n        </Form>\n      </Formik>\n      <Suspense fallback={<div>Loading movie list...</div>}>\n        <ul>\n          {searchedMovies &&\n            searchedMovies.map(({ id, title }) => {\n              return (\n                <li key={id}>\n                  <Link to={`${id}`} state={{ from: location }}>\n                    {title}\n                  </Link>\n                </li>\n              );\n            })}\n        </ul>\n      </Suspense>\n    </main>\n  );\n};\nexport default Movies;\n\n// Searchbar.propTypes = {\n//   onSubmit: PropTypes.func.isRequired,\n// };\n","// API themoviedb.org\n\n// /trending/get-trending список самых популярных фильмов на сегодня для создания коллекции на главной странице.\n// /search/search-movies поиск кинофильма по ключевому слову на странице фильмов.\n// /movies/get-movie-details запрос полной информации о фильме для страницы кинофильма.\n// /movies/get-movie-credits запрос информации о актёрском составе для страницы кинофильма.\n// /movies/get-movie-reviews запрос обзоров для страницы кинофильма.\n\nimport axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\nconst API_KEY = '8f517ea939a3e5bbc59bc55f9e33cbf1';\n\nexport async function getTrendingMovies() {\n    // https://api.themoviedb.org/3/trending/movie/day?api_key=<<api_key>>\n  const {data} = await axios.get(`/trending/movie/day?api_key=${API_KEY}`);\n  return data.results;\n}\n\nexport async function getSearchedMovies(query) {\n    // https://api.themoviedb.org/3/search/movie?api_key=<<api_key>>&language=en-US&page=1&include_adult=false\n    const params = new URLSearchParams({\n        api_key: API_KEY,\n        query: query,\n        language: 'en-US',\n       include_adult: false,\n    });\n    const {data} =  await axios.get(`/search/movie?${params}`);\n  return data.results;\n}\n\nexport async function getMovieDetails(id) {\n    // https://api.themoviedb.org/3/movie/{movie_id}?api_key=<<api_key>>&language=en-US\n  const { data } = await axios.get(`/movie/${id}?api_key=${API_KEY}&language=en-US`);\n  return data;\n}\n\nexport async function getMovieCast(id) {\n// https://api.themoviedb.org/3/movie/{movie_id}/credits?api_key=<<api_key>>&language=en-US\n   const { data } = await axios.get(`/movie/${id}/credits?api_key=${API_KEY}&language=en-US`);\nreturn data.cast;\n}\n\nexport async function getMovieReviews(id) {\n// https://api.themoviedb.org/3/movie/{movie_id}/reviews?api_key=<<api_key>>&language=en-US&page=1\n  const { data } = await axios.get(`/movie/${id}/reviews?api_key=${API_KEY}&language=en-US`);\n  return data.results;\n}\n\n"],"names":["schema","yup","shape","query","initialValues","useSearchParams","searchParams","setSearchParams","useState","searchedMovies","setSearchedMovies","get","location","useLocation","useEffect","getSearchedMovies","then","catch","error","toast","validationSchema","onSubmit","resetForm","trim","theme","type","autoComplete","autoFocus","placeholder","name","Suspense","fallback","map","id","title","to","state","from","axios","API_KEY","getTrendingMovies","data","results","params","URLSearchParams","api_key","language","include_adult","getMovieDetails","getMovieCast","cast","getMovieReviews"],"sourceRoot":""}