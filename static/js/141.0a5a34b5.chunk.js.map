{"version":3,"file":"static/js/141.0a5a34b5.chunk.js","mappings":"8PAGaA,GAAaC,E,QAAAA,IAAOC,EAAAA,GAAPD,CAAH,iP,SCAVE,EAAW,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,GAAIC,EAAe,EAAfA,SAC7B,OACE,UAACL,EAAD,CAAYI,GAAIA,EAAhB,WACE,SAAC,MAAD,CAAaE,KAAK,OACjBD,M,SC+CP,EAhDqB,WAAO,IAAD,IACzB,GAAwCE,EAAAA,EAAAA,UAAS,MAAjD,eAAOC,EAAP,KAAqBC,EAArB,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QACFE,GAAWC,EAAAA,EAAAA,MACXC,EAAY,oBAAGF,EAASG,aAAZ,aAAG,EAAgBC,YAAnB,QAA2B,UAQ7C,IANAC,EAAAA,EAAAA,YAAU,YACRC,EAAAA,EAAAA,IAAgBC,OAAOT,IACpBU,KAAKX,GACLY,OAAM,SAAAC,GAAK,OAAIC,EAAAA,GAAAA,MAAY,gDAC7B,CAACb,KAECF,EACH,OAAO,KAET,IAAQgB,EAAuDhB,EAAvDgB,YAAaC,EAA0CjB,EAA1CiB,MAAOC,EAAmClB,EAAnCkB,SAAUC,EAAyBnB,EAAzBmB,OAAQC,EAAiBpB,EAAjBoB,aACxCC,EAAYC,KAAKC,MAAqB,GAAfH,GACvBI,EAAM,yCAAqCR,GACjD,OACE,6BACE,SAACrB,EAAD,CAAUC,GAAIU,EAAd,sBACA,gBAAKmB,IAAKD,EAAQE,IAAKT,EAAOU,MAAM,SACpC,wBAAKV,KACL,wCAAgBI,EAAhB,QACA,qCACA,uBAAIH,KACJ,mCACA,uBAAIC,EAAOS,KAAI,SAAAC,GAAC,OAAIA,EAAEC,QAAMC,KAAK,QACjC,oDACA,2BACE,yBACE,SAAC,KAAD,CAAMnC,GAAG,OAAOW,MAAO,CAAEC,KAAMJ,EAASG,MAAMC,MAA9C,qBAIF,yBACE,SAAC,KAAD,CAAMZ,GAAG,UAAUW,MAAO,CAAEC,KAAMJ,GAAlC,2BAKJ,SAAC,EAAA4B,SAAD,CAAUC,UAAU,gDAApB,UACE,SAAC,KAAD,W,yMCtCRC,IAAAA,SAAAA,QAAyB,+BACzB,IAAMC,EAAU,mCAET,SAAeC,IAAtB,4CAAO,OAAP,oBAAO,sGAEgBF,IAAAA,IAAA,sCAAyCC,IAFzD,uBAEEE,EAFF,EAEEA,KAFF,kBAGEA,EAAKC,SAHP,kEAMA,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAAiCC,GAAjC,kFAEGC,EAAS,IAAIC,gBAAgB,CAC/BC,QAASR,EACTK,MAAOA,EACPI,SAAU,QACXC,eAAe,IANf,SAQmBX,IAAAA,IAAA,wBAA2BO,IAR9C,uBAQIJ,EARJ,EAQIA,KARJ,kBASEA,EAAKC,SATP,kEAYA,SAAe5B,EAAtB,+CAAO,OAAP,oBAAO,WAA+BoC,GAA/B,yFAEkBZ,IAAAA,IAAA,iBAAoBY,EAApB,oBAAkCX,EAAlC,oBAFlB,uBAEGE,EAFH,EAEGA,KAFH,kBAGEA,GAHF,kEAMA,SAAeU,EAAtB,+CAAO,OAAP,oBAAO,WAA4BD,GAA5B,yFAEmBZ,IAAAA,IAAA,iBAAoBY,EAApB,4BAA0CX,EAA1C,oBAFnB,uBAEIE,EAFJ,EAEIA,KAFJ,kBAGAA,EAAKW,MAHL,kEAMA,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAA+BH,GAA/B,yFAEkBZ,IAAAA,IAAA,iBAAoBY,EAApB,4BAA0CX,EAA1C,oBAFlB,uBAEGE,EAFH,EAEGA,KAFH,kBAGEA,EAAKC,SAHP","sources":["components/BackLink/BackLink.styled.js","components/BackLink/BackLink.jsx","pages/MovieDetails.jsx","services/themoviedbAPI.js"],"sourcesContent":["import { Link } from 'react-router-dom';\nimport styled from 'styled-components';\n\nexport const StyledLink = styled(Link)`\n  display: inline-flex;\n  align-items: center;\n  gap: 4px;\n  padding: 8px 0;\n  color: black;\n  text-decoration: none;\n  font-weight: 500;\n  text-transform: uppercase;\n\n  :hover {\n    color: orangered;\n  }\n`;","import { HiArrowLeft } from 'react-icons/hi';\nimport { StyledLink } from './BackLink.styled';\n\nexport const BackLink = ({ to, children }) => {\n  return (\n    <StyledLink to={to}>\n      <HiArrowLeft size=\"24\" />\n      {children}\n    </StyledLink>\n  );\n};\n","import { useState, useEffect, Suspense } from 'react';\nimport { useParams, useLocation, Link, Outlet } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport { BackLink } from '../components/BackLink/BackLink';\nimport { getMovieDetails } from '../services/themoviedbAPI';\n\nconst MovieDetails = () => {\n  const [movieDetails, setMovieDetails] = useState(null);\n  const { movieId } = useParams();\n  const location = useLocation();\n  const backLinkHref = location.state?.from ?? '/movies';\n\n  useEffect(() => {\n    getMovieDetails(Number(movieId))\n      .then(setMovieDetails)\n      .catch(error => toast.error('Something went wrong. Please try again.'));\n  }, [movieId]);\n\n  if (!movieDetails) {\n    return null;\n  }\n  const { poster_path, title, overview, genres, vote_average } = movieDetails;\n  const userScore = Math.round(vote_average * 10);\n  const poster = `https://image.tmdb.org/t/p/w500${poster_path}`;\n  return (\n    <main>\n      <BackLink to={backLinkHref}>Go back</BackLink>\n      <img src={poster} alt={title} width=\"240\" />\n      <h2>{title}</h2>\n      <p>User Score: {userScore}%</p>\n      <p>Overview</p>\n      <p>{overview}</p>\n      <p>Genres</p>\n      <p>{genres.map(g => g.name).join(' ')}</p>\n      <h3>Additional information</h3>\n      <ul>\n        <li>\n          <Link to=\"cast\" state={{ from: location.state.from }}>\n            Cast\n          </Link>\n        </li>\n        <li>\n          <Link to=\"reviews\" state={{ from: location }}>\n            Reviews\n          </Link>\n        </li>\n      </ul>\n      <Suspense fallback={<div>Loading subpage...</div>}>\n        <Outlet />\n      </Suspense>\n    </main>\n  );\n};\n\nexport default MovieDetails;\n","// API themoviedb.org\n\n// /trending/get-trending список самых популярных фильмов на сегодня для создания коллекции на главной странице.\n// /search/search-movies поиск кинофильма по ключевому слову на странице фильмов.\n// /movies/get-movie-details запрос полной информации о фильме для страницы кинофильма.\n// /movies/get-movie-credits запрос информации о актёрском составе для страницы кинофильма.\n// /movies/get-movie-reviews запрос обзоров для страницы кинофильма.\n\nimport axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\nconst API_KEY = '8f517ea939a3e5bbc59bc55f9e33cbf1';\n\nexport async function getTrendingMovies() {\n    // https://api.themoviedb.org/3/trending/movie/day?api_key=<<api_key>>\n  const {data} = await axios.get(`/trending/movie/day?api_key=${API_KEY}`);\n  return data.results;\n}\n\nexport async function getSearchedMovies(query) {\n    // https://api.themoviedb.org/3/search/movie?api_key=<<api_key>>&language=en-US&page=1&include_adult=false\n    const params = new URLSearchParams({\n        api_key: API_KEY,\n        query: query,\n        language: 'en-US',\n       include_adult: false,\n    });\n    const {data} =  await axios.get(`/search/movie?${params}`);\n  return data.results;\n}\n\nexport async function getMovieDetails(id) {\n    // https://api.themoviedb.org/3/movie/{movie_id}?api_key=<<api_key>>&language=en-US\n  const { data } = await axios.get(`/movie/${id}?api_key=${API_KEY}&language=en-US`);\n  return data;\n}\n\nexport async function getMovieCast(id) {\n// https://api.themoviedb.org/3/movie/{movie_id}/credits?api_key=<<api_key>>&language=en-US\n   const { data } = await axios.get(`/movie/${id}/credits?api_key=${API_KEY}&language=en-US`);\nreturn data.cast;\n}\n\nexport async function getMovieReviews(id) {\n// https://api.themoviedb.org/3/movie/{movie_id}/reviews?api_key=<<api_key>>&language=en-US&page=1\n  const { data } = await axios.get(`/movie/${id}/reviews?api_key=${API_KEY}&language=en-US`);\n  return data.results;\n}\n\n"],"names":["StyledLink","styled","Link","BackLink","to","children","size","useState","movieDetails","setMovieDetails","movieId","useParams","location","useLocation","backLinkHref","state","from","useEffect","getMovieDetails","Number","then","catch","error","toast","poster_path","title","overview","genres","vote_average","userScore","Math","round","poster","src","alt","width","map","g","name","join","Suspense","fallback","axios","API_KEY","getTrendingMovies","data","results","getSearchedMovies","query","params","URLSearchParams","api_key","language","include_adult","id","getMovieCast","cast","getMovieReviews"],"sourceRoot":""}